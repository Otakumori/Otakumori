generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContentPage {
  id        String   @id
  slug      String   @unique
  title     String
  excerpt   String?
  body      String?
  published Boolean  @default(true)
  updatedAt DateTime
  createdAt DateTime @default(now())
}

model Order {
  id              String         @id
  userId          String
  stripeId        String         @unique
  paymentIntentId String?
  chargeId        String?
  status          OrderStatus    @default(pending)
  totalAmount     Int
  currency        String         @default("USD")
  shippedAt       DateTime?
  trackingUrl     String?
  carrier         String?
  trackingNumber  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  paidAt          DateTime?
  petalsAwarded   Int            @default(0)
  printifyId      String?
  memoryCardKey   String?
  displayNumber   Int            @unique @default(autoincrement())
  primaryItemName String?        @default("")
  label           String?        @default("")
  User            User           @relation(fields: [userId], references: [id])
  OrderItem       OrderItem[]
  RewardLedger    RewardLedger[]
}

model OrderItem {
  id                String         @id
  orderId           String
  productId         String
  productVariantId  String
  sku               String
  name              String
  quantity          Int
  unitAmount        Int
  printifyProductId String?
  printifyVariantId Int?
  Order             Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product           Product        @relation(fields: [productId], references: [id])
  ProductVariant    ProductVariant @relation(fields: [productVariantId], references: [id])

  @@index([orderId])
  @@index([productVariantId])
}

model Product {
  id                String           @id
  name              String
  description       String?
  primaryImageUrl   String?
  stripeProductId   String?          @unique
  printifyProductId String?          @unique
  OrderItem         OrderItem[]
  ProductVariant    ProductVariant[]
}

model ProductVariant {
  id                String      @id
  productId         String
  previewImageUrl   String?
  printifyVariantId Int
  printProviderName String?
  leadMinDays       Int?
  leadMaxDays       Int?
  isEnabled         Boolean     @default(true)
  inStock           Boolean     @default(true)
  priceCents        Int?
  currency          String?     @default("USD")
  stripePriceId     String?     @unique
  OrderItem         OrderItem[]
  Product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, printifyVariantId])
  @@index([printifyVariantId])
  @@index([stripePriceId])
}

model RewardLedger {
  id           String   @id
  userId       String
  orderId      String?
  type         String
  amount       Int
  balanceAfter Int
  metadata     Json?
  createdAt    DateTime @default(now())
  Order        Order?   @relation(fields: [orderId], references: [id])
  User         User     @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId, createdAt])
}

model User {
  id                   String         @id
  email                String         @unique
  username             String         @unique
  display_name         String?
  avatarUrl            String?
  createdAt            DateTime       @default(now())
  petalBalance         Int            @default(0)
  hideRewardsExplainer Boolean        @default(false)
  runes                Int            @default(0)
  dailyClicks          Int            @default(0)
  lastClickDayUTC      DateTime       @default(now())
  activeCosmetic       String?
  activeOverlay        String?
  Order                Order[]
  RewardLedger         RewardLedger[]
  PetalLedger          PetalLedger[]
  gameRuns             GameRun[]
  achievements         UserAchievement[]
  inventory            InventoryItem[]
  coupons              CouponGrant[]
  soapstoneMessages    SoapstoneMessage[]
}

enum OrderStatus {
  pending
  pending_mapping
  in_production
  shipped
  cancelled
}

enum LedgerType {
  earn
  spend
  adjust
}

model PetalLedger {
  id        String      @id @default(cuid())
  userId    String
  type      LedgerType
  amount    Int         // +earn, -spend
  reason    String
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, type, createdAt])
}

model ProductReview {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int      // 1..5
  title      String?
  body       String
  imageUrls  String[] // Vercel Blob public URLs (max 3)
  isApproved Boolean  @default(false) // moderation gate
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId, createdAt])
  @@index([isApproved, createdAt])    // for admin queue & public listing
}

model MusicPlaylist {
  id        String      @id @default(cuid())
  name      String
  isPublic  Boolean     @default(true)
  createdBy String
  tracks    MusicTrack[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model MusicTrack {
  id         String  @id @default(cuid())
  playlistId String
  title      String
  artist     String
  url        String   // Vercel Blob URL
  sort       Int
  createdAt  DateTime @default(now())

  playlist   MusicPlaylist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@index([playlistId, sort])
}

model IdempotencyKey {
  key       String   @id
  purpose   String
  createdAt DateTime @default(now())
}

// Mini-Games System Models
model GameRun {
  id           String   @id @default(cuid())
  userId       String
  gameKey      String
  score        Int
  startedAt    DateTime @default(now())
  finishedAt   DateTime?
  rewardPetals Int      @default(0)
  meta         Json?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, gameKey])
}

model Achievement {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String
  points      Int      @default(0)
  rewardId    String?
  reward      Reward?  @relation(fields: [rewardId], references: [id])
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  createdAt     DateTime @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  @@unique([userId, achievementId])
}

enum RewardKind { 
  PETALS_BONUS 
  COSMETIC 
  OVERLAY 
  COUPON_PERCENT 
  COUPON_AMOUNT 
  RUNE_GRANT 
  TRACK_UNLOCK 
}

model Reward {
  id        String    @id @default(cuid())
  kind      RewardKind
  sku       String?
  value     Int?
  metadata  Json?
  createdAt DateTime  @default(now())
  achievements Achievement[]
}

enum InventoryKind { 
  COSMETIC 
  OVERLAY 
}

model InventoryItem {
  id         String        @id @default(cuid())
  userId     String
  sku        String
  kind       InventoryKind
  acquiredAt DateTime      @default(now())
  metadata   Json?
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, sku])
}

enum DiscountType { 
  PERCENT 
  OFF_AMOUNT 
}

model CouponGrant {
  id           String       @id @default(cuid())
  userId       String
  code         String       @unique
  discountType DiscountType
  amountOff    Int?
  percentOff   Int?
  expiresAt    DateTime?
  createdAt    DateTime     @default(now())
  redeemedAt   DateTime?
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Soapstone Messages System
model SoapstoneMessage {
  id        String   @id @default(cuid())
  userId    String?  // null = anon/guest if allowed
  content   String
  rotation  Float    @default(0) // degrees; small tilt like a rune
  createdAt DateTime @default(now())
  // moderation flags
  isHidden  Boolean  @default(false)
  isFlagged Boolean  @default(false)
  // score
  upvotes   Int      @default(0)
  
  likes     SoapstoneLike[]
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId, createdAt])
  @@index([isHidden, createdAt])
  @@index([isFlagged, createdAt])
}

model SoapstoneLike {
  id        String   @id @default(cuid())
  messageId String
  userId    String   // require auth to prevent abuse; or store ipHash if guests
  createdAt DateTime @default(now())

  message   SoapstoneMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  @@unique([messageId, userId]) // one like per user per message
}

model LeaderboardScore {
  id        String   @id @default(cuid())
  userId    String
  game      String              // e.g., "quick-math", "samurai-petal-slice"
  diff      String?             // optional: e.g., "easy|normal|hard|insane"
  score     Int
  statsJson Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([game, diff, score])
  @@unique([userId, game, diff])
}
