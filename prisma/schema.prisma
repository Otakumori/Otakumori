generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model ContentPage {
  id        String   @id
  slug      String   @unique
  title     String
  excerpt   String?
  body      String?
  published Boolean  @default(true)
  updatedAt DateTime
  createdAt DateTime @default(now())
}

model Order {
  id              String         @id
  userId          String
  stripeId        String         @unique
  paymentIntentId String?
  chargeId        String?
  status          OrderStatus    @default(pending)
  totalAmount     Int
  currency        String         @default("USD")
  shippedAt       DateTime?
  trackingUrl     String?
  carrier         String?
  trackingNumber  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  paidAt          DateTime?
  petalsAwarded   Int            @default(0)
  printifyId      String?
  memoryCardKey   String?
  displayNumber   Int            @unique @default(autoincrement())
  primaryItemName String?        @default("")
  label           String?        @default("")
  subtotalCents   Int            @default(0)
  User            User           @relation(fields: [userId], references: [id])
  OrderItem       OrderItem[]
  RewardLedger    RewardLedger[]
  UserRunes       UserRune[]
  EmailLogs       EmailLog[]
}

model OrderItem {
  id                String         @id
  orderId           String
  productId         String
  productVariantId  String
  sku               String
  name              String
  quantity          Int
  unitAmount        Int
  printifyProductId String?
  printifyVariantId Int?
  upc               String?        // Printify UPC for rune mapping
  Order             Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product           Product        @relation(fields: [productId], references: [id])
  ProductVariant    ProductVariant @relation(fields: [productVariantId], references: [id])

  @@index([orderId])
  @@index([printifyVariantId])
  @@index([upc])
}

model Product {
  id                String           @id
  name              String
  description       String?
  primaryImageUrl   String?
  stripeProductId   String?          @unique
  printifyProductId String?          @unique
  active            Boolean          @default(true)
  category          String?
  isNSFW            Boolean          @default(false)
  OrderItem         OrderItem[]
  ProductVariant    ProductVariant[]
}

model ProductVariant {
  id                String      @id
  productId         String
  previewImageUrl   String?
  printifyVariantId Int
  printProviderName String?
  leadMinDays       Int?
  leadMaxDays       Int?
  isEnabled         Boolean     @default(true)
  inStock           Boolean     @default(true)
  priceCents        Int?
  currency          String?     @default("USD")
  stripePriceId     String?     @unique
  OrderItem         OrderItem[]
  Product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, printifyVariantId])
  @@index([printifyVariantId])
  @@index([stripePriceId])
}

model RewardLedger {
  id           String   @id
  userId       String?
  orderId      String?
  type         String
  amount       Int
  balanceAfter Int
  metadata     Json?
  createdAt    DateTime @default(now())
  Order        Order?   @relation(fields: [orderId], references: [id])
  User         User?    @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId, createdAt])
}

model User {
  id                   String             @id @default(cuid())
  email                String             @unique
  username             String             @unique
  display_name         String?
  avatarUrl            String?
  createdAt            DateTime           @default(now())
  petalBalance         Int                @default(0)
  hideRewardsExplainer Boolean            @default(false)
  activeCosmetic       String?
  activeOverlay        String?
  clerkId              String             @unique
  dailyClicks          Int                @default(0)
  lastClickDayUTC      DateTime           @default(now())
  level                Int                @default(1)
  runes                Int                @default(0)
  xp                   Int                @default(0)
  nsfwAffirmationVer   Int                @default(1)
  nsfwAffirmedAt       DateTime?
  nsfwEnabled          Boolean            @default(true)
  coupons              CouponGrant[]
  gameRuns             GameRun[]
  inventory            InventoryItem[]
  Order                Order[]
  PetalLedger          PetalLedger[]
  questAssignments     QuestAssignment[]
  RewardLedger         RewardLedger[]
  soapstoneMessages    SoapstoneMessage[]
  streakShards         StreakShard[]
  achievements         UserAchievement[]
  userFiles            UserFile[]
  userTitles           UserTitle[]
  mergeLogs            MergeLog[]
  UserRunes            UserRune[]
  EmailLogs            EmailLog[]

  @@index([clerkId])
}

model PetalLedger {
  id        String     @id @default(cuid())
  userId    String?
  guestSessionId String?
  type      LedgerType
  amount    Int
  reason    String
  createdAt DateTime   @default(now())
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestSession GuestSession? @relation(fields: [guestSessionId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, type, createdAt])
  @@index([guestSessionId, createdAt])
  @@index([guestSessionId, type, createdAt])
}

model Quest {
  id          String            @id @default(cuid())
  key         String            @unique
  title       String
  description String
  kind        String
  basePetals  Int               @default(20)
  bonusPetals Int               @default(10)
  active      Boolean           @default(true)
  assignments QuestAssignment[]
}

model QuestAssignment {
  id            String    @id @default(cuid())
  userId        String
  questId       String
  day           String
  progress      Int       @default(0)
  target        Int       @default(1)
  completedAt   DateTime?
  claimedAt     DateTime?
  bonusEligible Boolean   @default(true)
  quest         Quest     @relation(fields: [questId], references: [id])
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questId, day])
  @@index([userId, day])
  @@index([questId, day])
}

model StreakShard {
  id        String   @id @default(cuid())
  userId    String
  day       String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, day])
  @@index([userId, day])
}

model ProductReview {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  title      String?
  body       String
  imageUrls  String[]
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId, createdAt])
  @@index([isApproved, createdAt])
}

model MusicPlaylist {
  id        String       @id @default(cuid())
  name      String
  isPublic  Boolean      @default(true)
  createdBy String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tracks    MusicTrack[]
}

model MusicTrack {
  id         String        @id @default(cuid())
  playlistId String
  title      String
  artist     String
  url        String
  sort       Int
  createdAt  DateTime      @default(now())
  playlist   MusicPlaylist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@index([playlistId, sort])
}

model IdempotencyKey {
  key       String   @id
  purpose   String
  createdAt DateTime @default(now())
}

model GameRun {
  id           String    @id @default(cuid())
  userId       String
  gameKey      String
  score        Int
  startedAt    DateTime  @default(now())
  finishedAt   DateTime?
  rewardPetals Int       @default(0)
  meta         Json?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, gameKey])
}

model Achievement {
  id               String            @id @default(cuid())
  code             String            @unique
  name             String
  description      String
  points           Int               @default(0)
  rewardId         String?
  reward           Reward?           @relation(fields: [rewardId], references: [id])
  userAchievements UserAchievement[]

  @@index([code])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  createdAt     DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Reward {
  id           String        @id @default(cuid())
  kind         RewardKind
  sku          String?
  value        Int?
  metadata     Json?
  createdAt    DateTime      @default(now())
  achievements Achievement[]

  @@index([kind])
  @@index([sku])
}

model InventoryItem {
  id         String        @id @default(cuid())
  userId     String
  sku        String
  kind       InventoryKind
  acquiredAt DateTime      @default(now())
  metadata   Json?
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, sku])
}

model CouponGrant {
  id           String       @id @default(cuid())
  userId       String
  code         String       @unique
  discountType DiscountType
  amountOff    Int?
  percentOff   Int?
  expiresAt    DateTime?
  createdAt    DateTime     @default(now())
  redeemedAt   DateTime?
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SoapstoneMessage {
  id        String          @id @default(cuid())
  userId    String?
  content   String
  rotation  Float           @default(0)
  createdAt DateTime        @default(now())
  isHidden  Boolean         @default(false)
  isFlagged Boolean         @default(false)
  upvotes   Int             @default(0)
  likes     SoapstoneLike[]
  user      User?           @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([isHidden, createdAt])
  @@index([isFlagged, createdAt])
}

model SoapstoneLike {
  id        String           @id @default(cuid())
  messageId String
  userId    String
  createdAt DateTime         @default(now())
  message   SoapstoneMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model LeaderboardScore {
  id        String   @id @default(cuid())
  userId    String
  game      String
  diff      String?
  score     Int
  statsJson Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, game, diff])
  @@index([game, diff, score])
}

model PetalShopItem {
  id          String    @id @default(cuid())
  sku         String    @unique
  name        String
  kind        String
  priceRunes  Int?
  pricePetals Int?
  eventTag    String?
  visibleFrom DateTime?
  visibleTo   DateTime?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([kind])
  @@index([eventTag])
  @@index([visibleFrom, visibleTo])
  @@map("ShopItem")
}

model UserFile {
  id        String   @id @default(cuid())
  userId    String
  key       String   @unique
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, createdAt])
}

model UserTitle {
  id        String   @id @default(cuid())
  userId    String
  title     String
  awardedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, awardedAt])
}

model GuestSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  lastSeenAt DateTime @default(now())
  petalEvents PetalLedger[]
  mergeLogs  MergeLog[]

  @@index([createdAt])
  @@index([lastSeenAt])
}

model MergeLog {
  id                String   @id @default(cuid())
  guestSessionId    String
  userId            String
  mergedAt          DateTime @default(now())
  guestPetalCountAtMerge Int
  userPetalCountBefore   Int
  userPetalCountAfter    Int
  guestSession      GuestSession @relation(fields: [guestSessionId], references: [id], onDelete: Cascade)
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([guestSessionId, userId])
  @@index([userId, mergedAt])
  @@index([guestSessionId, mergedAt])
}

model SiteConfig {
  id        String   @id @default("singleton")
  guestCap  Int      @default(50)
  burst     Json     @default("{\"enabled\":true,\"minCooldownSec\":15,\"maxPerMinute\":3,\"particleCount\":{\"small\":20,\"medium\":40,\"large\":80},\"rarityWeights\":{\"small\":0.6,\"medium\":0.3,\"large\":0.1}}")
  tree      Json     @default("{\"sway\":0.5,\"spawnRate\":2000,\"snapPx\":4,\"dither\":0.3}")
  theme     Json     @default("{\"pinkIntensity\":0.7,\"grayIntensity\":0.8,\"motionIntensity\":2}")
  seasonal  Json     @default("{\"sakuraBoost\":false,\"springMode\":false,\"autumnMode\":false}")
  rewards   Json     @default("{\"baseRateCents\":300,\"minPerOrder\":5,\"maxPerOrder\":120,\"streak\":{\"enabled\":true,\"dailyBonusPct\":0.05,\"maxPct\":0.25},\"seasonal\":{\"multiplier\":1.0},\"daily\":{\"softCap\":200,\"postSoftRatePct\":0.5,\"hardCap\":400},\"firstPurchaseBonus\":20}")
  runes     Json     @default("{\"defs\":[],\"combos\":[],\"gacha\":{\"enabled\":false}}")
  updatedAt DateTime @updatedAt
  updatedBy String?
}

model RuneDef {
  id            String   @id @default(cuid())
  canonicalId   String   @unique // rune_a, rune_b, etc.
  displayName   String?
  glyph         String?
  lore          String?
  printifyUPCs  String[] // Array of UPCs that map to this rune
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userRunes     UserRune[]
  runeCombos    RuneComboMember[]

  @@index([canonicalId])
  @@index([isActive])
}

model RuneCombo {
  id            String   @id @default(cuid())
  comboId       String   @unique
  members       String[] // Array of canonical rune IDs
  revealCopy    String?
  cosmeticBurst String?  // "small", "medium", "large"
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  members_rel   RuneComboMember[]

  @@index([comboId])
  @@index([isActive])
}

model RuneComboMember {
  id          String    @id @default(cuid())
  comboId     String
  runeId      String
  combo       RuneCombo @relation(fields: [comboId], references: [id], onDelete: Cascade)
  rune        RuneDef   @relation(fields: [runeId], references: [id], onDelete: Cascade)

  @@unique([comboId, runeId])
  @@index([comboId])
  @@index([runeId])
}

model UserRune {
  id        String   @id @default(cuid())
  userId    String
  runeId    String
  orderId   String?
  acquiredAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rune      RuneDef  @relation(fields: [runeId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@unique([userId, runeId])
  @@index([userId, acquiredAt])
  @@index([runeId])
  @@index([orderId])
}

model EmailLog {
  id         String   @id @default(cuid())
  userId     String?
  orderId    String?
  to         String
  provider   String   @default("resend")
  template   String
  status     String   @default("pending")
  meta       Json?
  sentAt     DateTime?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  order      Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([orderId])
  @@index([status])
  @@index([sentAt])
}

enum OrderStatus {
  pending
  pending_mapping
  in_production
  shipped
  cancelled
}

enum LedgerType {
  earn
  spend
  adjust
  burst_bonus
  seasonal
  purchase_bonus
  first_purchase_bonus
  milestone_bonus
  combo_reveal
}

enum RewardKind {
  PETALS_BONUS
  COSMETIC
  OVERLAY
  COUPON_PERCENT
  COUPON_AMOUNT
  RUNE_GRANT
  TRACK_UNLOCK
}

enum InventoryKind {
  COSMETIC
  OVERLAY
  TEXT
  CURSOR
}

enum DiscountType {
  PERCENT
  OFF_AMOUNT
}
