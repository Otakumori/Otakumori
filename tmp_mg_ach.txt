// DEPRECATED: This component is a duplicate. Use app\sign-in\[[...sign-in]]\page.tsx instead.
'use client';

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { COPY } from '@/app/lib/copy';
import GlassButton from '@/app/components/ui/GlassButton';
import GlassCard from '@/app/components/ui/GlassCard';

interface Achievement {
  id: string;
  title: string;
  description: string;
  category: 'daily' | 'weekly' | 'skill' | 'collector' | 'social';
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
  icon: string;
  progress: number;
  maxProgress: number;
  completed: boolean;
  reward: {
    petals: number;
    items?: string[];
    title?: string;
  };
  unlockedAt?: Date;
}

export default function AchievementsPage() {
  const [activeCategory, setActiveCategory] = useState<
    'all' | 'daily' | 'weekly' | 'skill' | 'collector' | 'social'
  >('all');
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [totalProgress, setTotalProgress] = useState({ completed: 0, total: 0 });

  // Mock data - in real app, this would come from API
  useEffect(() => {
    const mockAchievements: Achievement[] = [
      // Daily Achievements
      {
        id: 'daily_login',
        title: 'Daily Bloom',
        description: 'Log in for 3 consecutive days',
        category: 'daily',
        rarity: 'common',
        icon: 'üåÖ',
        progress: 2,
        maxProgress: 3,
        completed: false,
        reward: { petals: 50 },
      },
      {
        id: 'daily_games',
        title: 'Game Master',
        description: 'Play at least one mini-game today',
        category: 'daily',
        rarity: 'common',
        icon: 'üéÆ',
        progress: 1,
        maxProgress: 1,
        completed: true,
        reward: { petals: 25 },
        unlockedAt: new Date(),
      },

      // Weekly Achievements
      {
        id: 'weekly_all_games',
        title: 'Renaissance Player',
        description: 'Play all 4 mini-games in one week',
        category: 'weekly',
        rarity: 'rare',
        icon: 'üéØ',
        progress: 3,
        maxProgress: 4,
        completed: false,
        reward: { petals: 200, items: ['Golden Rune Fragment'] },
      },
      {
        id: 'weekly_score',
        title: 'High Scorer',
        description: 'Achieve a total score of 10,000 across all games',
        category: 'weekly',
        rarity: 'rare',
        icon: 'üèÜ',
        progress: 7500,
        maxProgress: 10000,
        completed: false,
        reward: { petals: 150 },
      },

      // Skill Achievements
      {
        id: 'petal_storm',
        title: 'Petal Storm',
        description: 'Achieve a 100+ combo in Petal Samurai',
        category: 'skill',
        rarity: 'epic',
        icon: '‚ö°',
        progress: 0,
        maxProgress: 100,
        completed: false,
        reward: { petals: 500, items: ['Storm Cloud Essence'], title: 'Storm Master' },
      },
      {
        id: 'perfect_recall',
        title: 'Perfect Recall',
        description: 'Complete Memory Match with zero mistakes',
        category: 'skill',
        rarity: 'epic',
        icon: 'üß†',
        progress: 0,
        maxProgress: 1,
        completed: false,
        reward: { petals: 300, items: ['Memory Crystal'] },
      },
      {
        id: 'bubble_master',
        title: 'Bubble Master',
        description: 'Survive 60 seconds in Bubble Girl challenge mode',
        category: 'skill',
        rarity: 'rare',
        icon: 'ü´ß',
        progress: 45,
        maxProgress: 60,
        completed: false,
        reward: { petals: 200 },
      },

      // Collector Achievements
      {
        id: 'rune_collector',
        title: 'Rune Collector',
        description: 'Complete all 3 rune sets in Memory Match',
        category: 'collector',
        rarity: 'legendary',
        icon: 'üìú',
        progress: 1,
        maxProgress: 3,
        completed: false,
        reward: { petals: 1000, items: ['Eternal Rune'], title: 'Rune Keeper' },
      },
      {
        id: 'item_collector',
        title: 'Treasure Hunter',
        description: 'Collect 50 unique items in Trade Hall',
        category: 'collector',
        rarity: 'epic',
        icon: 'üíé',
        progress: 12,
        maxProgress: 50,
        completed: false,
        reward: { petals: 750, items: ['Legendary Chest'] },
      },

      // Social Achievements
      {
        id: 'first_trade',
        title: 'First Trade',
        description: 'Complete your first trade with another player',
        category: 'social',
        rarity: 'common',
        icon: 'ü§ù',
        progress: 0,
        maxProgress: 1,
        completed: false,
        reward: { petals: 100 },
      },
      {
        id: 'trade_master',
        title: 'Trade Master',
        description: 'Complete 10 successful trades',
        category: 'social',
        rarity: 'rare',
        icon: 'üè™',
        progress: 0,
        maxProgress: 10,
        completed: false,
        reward: { petals: 300, title: 'Merchant' },
      },
    ];

    setAchievements(mockAchievements);

    const completed = mockAchievements.filter((a) => a.completed).length;
    setTotalProgress({ completed, total: mockAchievements.length });
  }, []);

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common':
        return 'text-gray-600 bg-gray-100 border-gray-200';
      case 'rare':
        return 'text-blue-600 bg-blue-100 border-blue-200';
      case 'epic':
        return 'text-purple-600 bg-purple-100 border-purple-200';
      case 'legendary':
        return 'text-yellow-600 bg-yellow-100 border-yellow-200';
      default:
        return 'text-gray-600 bg-gray-100 border-gray-200';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'daily':
        return 'üìÖ';
      case 'weekly':
        return 'üìä';
      case 'skill':
        return '‚öîÔ∏è';
      case 'collector':
        return 'üéí';
      case 'social':
        return 'üë•';
      default:
        return 'üèÜ';
    }
  };

  const filteredAchievements =
    activeCategory === 'all'
      ? achievements
      : achievements.filter((a) => a.category === activeCategory);

  const categories = [
    { id: 'all', label: 'All', icon: 'üèÜ' },
    { id: 'daily', label: 'Daily', icon: 'üìÖ' },
    { id: 'weekly', label: 'Weekly', icon: 'üìä' },
    { id: 'skill', label: 'Skill', icon: '‚öîÔ∏è' },
    { id: 'collector', label: 'Collector', icon: 'üéí' },
    { id: 'social', label: 'Social', icon: 'üë•' },
  ];

  return (
    <main className="min-h-screen bg-gradient-to-br from-pink-50 via-gray-50 to-pink-100">
      <div className="container mx-auto max-w-6xl p-4">
        {/* Header */}
        <header className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">Achievements</h1>
              <p className="text-gray-600">Track your progress and unlock rewards</p>
            </div>
            <GlassButton href="/mini-games" variant="secondary">
              {COPY.games.backToHub}
            </GlassButton>
          </div>
        </header>

        {/* Progress Overview */}
        <GlassCard className="p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-gray-900">Overall Progress</h2>
            <span className="text-2xl font-bold text-pink-600">
              {totalProgress.completed}/{totalProgress.total}
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <motion.div
              className="bg-gradient-to-r from-pink-500 to-purple-600 h-3 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${(totalProgress.completed / totalProgress.total) * 100}%` }}
              transition={{ duration: 1, ease: 'easeOut' }}
            />
          </div>
          <p className="text-sm text-gray-600 mt-2">
            {Math.round((totalProgress.completed / totalProgress.total) * 100)}% Complete
          </p>
        </GlassCard>

        {/* Category Filter */}
        <div className="flex gap-2 mb-6 overflow-x-auto">
          {categories.map((category) => (
            <motion.button
              key={category.id}
              className={`px-4 py-2 rounded-lg font-medium transition-colors whitespace-nowrap ${
                activeCategory === category.id
                  ? 'bg-pink-600 text-white'
                  : 'bg-white/20 text-gray-700 hover:bg-white/30'
              }`}
              onClick={() => setActiveCategory(category.id as any)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <span className="mr-2">{category.icon}</span>
              {category.label}
            </motion.button>
          ))}
        </div>

        {/* Achievements Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredAchievements.map((achievement) => (
            <motion.div
              key={achievement.id}
              className={`border-2 rounded-xl p-4 transition-all ${
                achievement.completed
                  ? 'bg-green-50 border-green-200'
                  : 'bg-white/50 border-gray-200 hover:border-gray-300'
              }`}
              whileHover={{ scale: 1.02 }}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <div className="flex items-center justify-between mb-3">
                <span className="text-3xl">{achievement.icon}</span>
                <div className="flex items-center gap-2">
                  <span
                    className={`px-2 py-1 rounded text-xs font-medium ${getRarityColor(achievement.rarity)}`}
                  >
                    {achievement.rarity}
                  </span>
                  {achievement.completed && <span className="text-green-600 text-lg">‚úì</span>}
                </div>
              </div>

              <h3 className="font-semibold text-gray-900 mb-1">{achievement.title}</h3>
              <p className="text-sm text-gray-600 mb-3">{achievement.description}</p>

              {/* Progress Bar */}
              <div className="mb-3">
                <div className="flex justify-between text-xs text-gray-500 mb-1">
                  <span>Progress</span>
                  <span>
                    {achievement.progress}/{achievement.maxProgress}
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <motion.div
                    className={`h-2 rounded-full ${
                      achievement.completed
                        ? 'bg-green-500'
                        : 'bg-gradient-to-r from-pink-500 to-purple-600'
                    }`}
                    initial={{ width: 0 }}
                    animate={{
                      width: `${(achievement.progress / achievement.maxProgress) * 100}%`,
                    }}
                    transition={{ duration: 0.8, ease: 'easeOut' }}
                  />
                </div>
              </div>

              {/* Rewards */}
              <div className="space-y-1">
                <div className="flex items-center gap-2 text-sm">
                  <span className="text-pink-600">üå∏</span>
                  <span className="text-gray-700">{achievement.reward.petals} petals</span>
                </div>
                {achievement.reward.items?.map((item, index) => (
                  <div key={index} className="flex items-center gap-2 text-sm">
                    <span className="text-blue-600">üíé</span>
                    <span className="text-gray-700">{item}</span>
                  </div>
                ))}
                {achievement.reward.title && (
                  <div className="flex items-center gap-2 text-sm">
                    <span className="text-purple-600">üëë</span>
                    <span className="text-gray-700">{achievement.reward.title}</span>
                  </div>
                )}
              </div>

              {achievement.completed && achievement.unlockedAt && (
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <p className="text-xs text-green-600">
                    Unlocked: {achievement.unlockedAt.toLocaleDateString()}
                  </p>
                </div>
              )}
            </motion.div>
          ))}
        </div>

        {/* Recent Unlocks */}
        {achievements.filter((a) => a.completed).length > 0 && (
          <GlassCard className="p-6 mt-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4">Recent Unlocks</h2>
            <div className="space-y-3">
              {achievements
                .filter((a) => a.completed)
                .slice(0, 3)
                .map((achievement) => (
                  <div
                    key={achievement.id}
                    className="flex items-center gap-3 p-3 bg-green-50 rounded-lg"
                  >
                    <span className="text-2xl">{achievement.icon}</span>
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900">{achievement.title}</h3>
                      <p className="text-sm text-gray-600">{achievement.description}</p>
                    </div>
                    <div className="text-right">
                      <div className="text-sm font-medium text-pink-600">
                        +{achievement.reward.petals} petals
                      </div>
                      {achievement.unlockedAt && (
                        <div className="text-xs text-gray-500">
                          {achievement.unlockedAt.toLocaleDateString()}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
            </div>
          </GlassCard>
        )}
      </div>
    </main>
  );
}

