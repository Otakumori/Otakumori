---
description: 'Enforce in-place edits, typecheck/lint/prisma after changes'
globs: ['**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx']
alwaysApply: true
---

# Execution Protocol

## In-Place Edits & Validation

### Edit Strategy

- **ALWAYS** prefer editing existing files over creating new ones
- Use `search_replace` or `MultiEdit` for targeted changes
- Never delete aspects of the project until ensuring they don't already exist
- Maintain existing file structure and naming conventions

### Validation Sequence

After ANY code changes, run in order:

1. `npm run typecheck` - Ensure 0 TypeScript errors
2. `npm run lint` - Fix any linting errors (warnings acceptable)
3. `npx prisma generate` - If schema changes made
4. `npm run build --no-lint` - Verify successful build

### Error Handling

- TypeScript errors are **blocking** - must be fixed
- ESLint errors must be resolved for changed lines
- Prisma schema changes require migration generation
- Build failures must be investigated and resolved

### Code Quality Standards

- No `any` types unless justified with comment
- Strict TypeScript mode enforced
- Prefer small, composable functions
- Use absolute imports via `@/...` syntax

### Tool Usage

- Use `read_file` before editing to understand context
- Run `grep` for exact symbol searches
- Use `codebase_search` for semantic exploration
- Always check `read_lints` after edits on modified files

### Commit Standards

- Atomic commits with descriptive messages
- Include file count and change summary
- Use conventional commit format when appropriate
- Verify all validations pass before committing
